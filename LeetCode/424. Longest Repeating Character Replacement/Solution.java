import java.util.*;

class Solution {
    public static void main(String[] args) {
        Solution sol = new Solution();
        int result;
        long startTime = System.nanoTime();
        result = sol.characterReplacementRef(
            "HOFOBTBYHGRGWLFCZTVTPVCNTDWKIVLMVMSCTFXCMLYAMPAUHBLAFTSUCBLJRJZBOWFVTBKOKNVCSTFZMPDILRHNXYIVNIYDTVEQPWGBQMHNDTVJBGPCHYCDXATCXSHDTKOFAVASLNVZZHGALSGXFHWECYGBBJKLNUMBTLQPDFVKOUYKPCVVQBBJLUIYOVDWZFDWGQOFSJGFXCCGOJYHLLOTKRRWPTWZIIXKWXAPJAQSHYMKZSGABRMPEWLZNURONELDVZDVYLGBZPPKLFYOJSBEVLMEZFEUQFOVISLWCTCUNLIBSWQJLBSZMHJHJFSVSVPTRUQYTPRTBLCBWTOVWBKLESBFSCRIODQKIBRSDBXETYONBMXQUDBDONRJQQBEERNDJWIWPBXHSTRKJTAAVCXELYTYQUAQJVARTKTGNNJHLPLCQRUACRMKLSCLMUPCAEJZGWACNLEXGQDVYRIZFCWPIBRQJNDPOBYLIAJDLAWZUIOZINPEEISKXUKDDPIHUVMOKRGPOXRMCQQUNXAXDFRUHKVKLJGIQSHUAWYXDFZAZARMZJTHOSIRRNCZKMYPSHFNIADJGPRDVTZVHDSXDEOABZJSNZHHVQFTWJAFVIMEBKVBBGGDWJUCZYHPYTWEXRYJSNKLBNPCHIZGELMGRKVJECLRFNCDGNXPDDIQFMRFSRLZNIIIJPXQESIQWLKDGKQSDJJTHEFQJWQPMYSCHOFFNPRJHZQLWTNCJHVSYMRAIDPNHPWDTVCCMXAKXPNZCJIEMUGWQCVRJOYJICNGYSYBKKZDADXPBHOEHJECEKTJKXMIMUOHRIOBOMHGKRKUQFCCMKFUVDPNOLAOVAMEGMHLPFGCSCOQDUZCKWWMEYIXUNDRRGHSUJFEYKVHHFEIVKOODHGOMJXGRMVTFKZJUFYSJNWSIBBUZZMIWNIDCMARWFKLQGIBOUUYOKOAKGZBBZUXZTDEXVFRXXDVPLVKJIOUUDXVFRHLGUKPJDGOBSXIOWJWOICDIRJISYWOZYINRCMIZDYPQTJXYBRKXJFPIQFXGJSCWXKHYISKPEZOGDQXTWJJTNVMLBHCGPUATVOHNHCSZWSABTNOVAAJSFYTZSDSVNKDTEJOMWEMCASYRXCMNZEZDNQQWVRUFFNWOZEMIPXWMODSPDLXUYBNOXVZZYJTWAFGORAOZOMLHCTKUVHVQFPZSCFEUVTNCPQEPJHXYDKZVSOIXLHXMKHXOJFBPBKFQOSRTXLLJUJBHSIXMZGNKCTJLJVLHNOAHICPSHBGVATTJGBNQVJVAKAPGQWBUHVPVPAJJJJGRYFHZGIDTNNPXWCCFSBBYEBIXTESHYVLXCKICCWWHJMUXJXZYBIEORRQGWFXCTRRXKEOYQEBZGQJRMODERYSZTHZRJDZQTLCDFCYHLIUSXWGKDHBJDFGOALSHIAUDKQDZYDWFPRMCEYZBKMZFURIGRVCKEXGHSQEWLATVUHAPCZNYYUUOSTCATUSKWGMSCCBBYREQPXYPHHZHXWWYARQXNRNYMRKNVMTSXGBTPRUZMWHBZJPVRLLKECEZUGFBVYTWYTJAODDNQEZRFRMDWUWDISMTXANVYSRICNEPHLSQKFVQKYLBKZZZBSKKKVPRMSSTBCVRWFSPEKFPUICKNNTSMRRIGAFJHKBRVAAVWVYVCCDPVAUSBSETLOZVGZBAVZSOYUGYHVRWWKQXQJNCJNEZPJIABYVVEEGOBAZVFAWTCKLTFNQDVCJEPAUDWUPTETTGMWGNDMBGBSSVNBSIIQNWLXFUTWLIZQQJAYYRARIMUZPIMDOQMATXJVAXDXDHLHKMERUMJJFGJGCZVZSJXQASVTJIPURMALABCTQZQWAUNVHUEVBGTGVCLALCBLDUBDIZPFFAZDPRLKJTLSYQDLUZDPOWOIUYLQHVWIIYYHASUKWDXAFBDYUQUXLZYULMYFFLXKZTFHBEFIGUWUUYLJVXKMIQVFGTJKUNGPQHLXEMRHBUUEYVWMSOWZURUSEKZBTLZXTWCXCHUSBYNIVXBXUWTEAAIXXLUZXLRYRDNETDRBYJOAVEYUQKPOTDJZFBTTMJAEGRQTVWTRZPJOVAIGPIEDKRHVRNMEILXFMFODLNIVSMHZWZHEDMANFSMQNBPQCMRXOCWVNZIQCFDNSZJLTBUAVCIKVTQRXWMXWCSNTVPWAGXCRGRBGMMDNCLFRSUJZAYLVJAZITZPFHCCKXERAWKHZOFETVXWCASLWSYISVBSAAIMYNCGHYFACMSUCBBBVFTPHQSSGNMNPFJCMEFOVDXBOZLPCTBFWLYRRWYNWSAPZFZGBHBKFGQBBJOZBGXDYNLPDRPDPMIFDVTXGELHHQLXQPQVPQAETJFEQZQNRZTVJKIWZKLXMZUJSEJOSSYHRHKOQPUEWKMYZVAVPXCLWMCNQCDDTSRWYNTCADUXHECSZJTDUVYZBJJWRKEQHMLSTGEKAAUPPJKSLCOZTNEFWLQPXQEPWTDMNMVJJZRCIFCLKISBVYZGHNTYMPXLFIOPAIWAOLBOPNSKUDNQTJNRSPNCXVCQEDFIFGGNUTDLNSXNMZUEJSYHKIGJVPGDRFCLOTKOTZVGYYEWCQHKLCAIXTPPXKBPYRZLRGLTCLZVJVNWHMVNMFBEWHMYNUZEGGUBCOOYWWPCWIQCXAEADUMGBOGMWEMYBDVKEGCVPZBHSXFXGVXPESNIIQMPBVOLHYQXFECLBMBTHFVQUIPFKCCQPGYITHIUTDGSUILWJLSQAOWMRHRMIISZLJLLDKEQQYDEIHQUHCTWCROTPDNSKAHOTWJBNNDHTJQENHHLRDRXFDLBZROHSDUWSIWIRWMJMBAFMQZCHLNTICCGRHCJASITTKWRDMDOFYLXVWFDERHKZPRWNBDRULGECPAGVIYDLELKGJLYDKKLEZDJLVGUMOYMQPZPBHYCPUDJHZFQGSUXHRDOWLPHLPUQUHXUGGVYXWFYEZTRTTUOMXKFRWPZGSWBWBOLHUGJWCZBDUYPVSBDLWGVSFVNWCKWKPNDNWGSRXSGGTBTENPSHXJNGBQZGEYANMHTRJSUBFUAWBBKNKJARTPLNONISBLZNKRMYOLIUFPGOKWELTGEXNHWQRBRXUCANFWGREUBACBBSLGMRHQMIHMKOMTTVYLYVVEEQCSFQAGLKJLPJSFGQRDUALJLHZAMTMAQZZMEAFYNJBFFWYVNEBALNKSJBYQDXHXNHLHZVLZVAZKSYXLOITOGKZADPGIERNYMJNYEJSNOIYHQSRUKYBCQBLLDFGZEWUEIKAPOGNTPNWERPEBAXBJSFIMVFJJLABRQUUJUGIQXCCGZAPJKNJDCLNDSJXVDBEUNYHLWTNTQCIGYQXUMAFHRJMJZDXXKPGOOQZZAJDDALYAUPBBKPMUYTEYOUVIKTOFEOCBMXOCHHBMTCFQDVXTOEYICKAYPZTSDYKIXDKGGQCKMEGGUYQIDRRHREZKDTXVEQIUWRNKHZKPWYIPLVUGXDLGRWVNJNTZKKIVJEDTQCUSUYLQUXXRIRMHXSPXYHBIGLVJDDJVEOFTMOGNDQONTPNEXAEQYSHSBBKCHKZMAWVVZRXVUPBBZNPRLSOBCLTBLYHRPAEICKSJFBDETIQVAUKJRBRHYFHPRQQEHRTWASWEXLAWBCCSEIERTLBSDEJJAGGBGRYSKNPFOAPZIJUWXHFKOGYSCONWGVSKYBBXCVKXYFERSXLGOOGDDYKRSLMKBOEQNWMLDNQEMFOHWKOBVEMCUZKDMOYGCDSEPRBQTZEEBNQLMAJOCLWEKBRYBGUUDODAQVBAVJHZYKATHCDUWLBWCPPADYOYQFHLPLPHRKKPOVWHGBFVYUEYSUJWTYHDJWHRZHBVSJDTAVVWRLVWISJSCRAUYZGBVSKWOMMXUXHBIBRYAFMNLDKCNHCRMVGVZWJGABDEFOMOQXGVJPNQQMGHXDXUVIBRHPVBKHUGOPABYPXJKUNBUWDFSWUPCIZVXMRDKLKAVZXQYIBUWOQICOHIGGSGWTNJMHYLWRLNJMZVXJKFLZPUFQJRXPCXXDJWXGLSGKNPBPFGIVRCTOPIRWNRGWNPXDTQLVBZOSCTPSXYRWNYYSQNFAIZMPQSHLQMNUFUZTFPFCNCFITBZLXHJAUGSMGDCGMUGUKRHYNLVUQCPSFSIBAKRGDOEMGNKESLSKAUUACPCDSWPSYECBEHJKIFKWVGMARQXRSJILQVJHPGRUHUCDRBELHYNTEDKLXJBEVVAQPJPRVAJALLROATXFSOLLYFSSHINNHTIKSBQVHEEHTPVVMWQCPWPJBLRPAXWSGRWOJCUOXKZZTRBXNELGEPHXNMWPAWTMHPSSBSXEYFCPOABRWKWVPKLVRPALBHBZPHORMVTDYYODTDYBHNFXEASARUUTZILRHFNHCRZEYNPZJENUONXLUBMDYGJOSIBGAPUAVFDXOZUXPAESVOLCBOMIGJNVYVVBFOXXNYSJOKQMGTBKXCDQXWOBRURHSTRQBEMMHKDTXKPBRMJLBXDGBMOECVEBVDSFNFTWPYXHRFYRPCNRFKBYTDGXYVOHSIWMNLLIJJFCGAFKPLJPHKRVISDNLFZHMYILNJJBRYHXHPXJAHPYQKDYDOWJQDFCTYLSHDJKXXKKZXBKDNVNVWYAVCFANDZAUDTLEOUVMMUOSPBDJRQKMBYWPVATPIAZXXSVLZGCNQHOFGMPFYGNTOOUYJYCLWZPSDNZSDKXPWXNGCOGESJMELGVHVGUAYMIRBUNBSKBOWUEJBDLCORYZDXACHLMJVMZGPUHHNFYEATEMBSNVXRJAWBVLUIXZNQZVZXAZIVDQDVYAHTROHQNCNLYBPOJVXECDEUOLYJELHTXJWNEYEWRKFWLTCVSBFNSLYXFKXCWBYWFCOZDFMWQGOIDOLFGWTVQNUZUJVOQZGDIGBIUTHHLHKRATRNHROPINPFWBEITQCCRJBDNBEROGOOEXSLWSBUFOWBHHBKOMPIKJSDIWNFPEQSAWUCMVTLPSSSMTSWRYFLRCMDZCSBQGSEYHILMFSRXMMVQRLBLIHUYQVGFWIIQOBIPPAIMVCFRPKLFHDVVAOXMIWJYZKMTJCYUAOUTSORZLNDPGBRQCSOVRFCHPOSJJKASCKXCGWHSIWLOGPAIRNPMKFKISVFQEXIBJFEFYOGBMKNMAIRWIDJPORIZYWWCZPVPPRMZENUTXQUPWBZQVTKKOOWSXPWWZUQFOHEVGLLKVSSVDCZVQHSVFJGUAAXNVGGCPVYXZNITHVAQVREROKIQFDUWNTSMWKTLRFOGFDIYHWAQNFTXGQRSJKKMVLQEDMLLEDGHWOZHHVYHNUSLELHOOJSAWMLVFVXDZKFUGDCZRANDBVSOLAOOKATMWLHKDNCAUAHTUTLZFGVDEBFHOHWGODWAWPDUELBBJOXPBQMPIMHLONVYJNEXJFQLIGNPSTMZSEESOHMRXDHTUDMWUFFFFVRTSLVEIPZLCBMHMQJDZRKDKFMYPMOYEGRJDPSSJQOXHXSWTGVKBCRFVQVLUEDGYYYFWSOORFQHYNDIXDMJKMRWBOKGITRTBXSFAMTTHHCKFWCXONRKYUFIZFAQPKLNKCKVZMKUPWWGZWNUPYJZXLPBCCJXUKYZUHITLDJMBKUOPHAGMJOZIDAYIBKOXZROYVVWSBEZDJJPSHIVFLEXECRWYCYDQCQSFNVUHUIROMHXHLWELXVBWXJHHABGVGSAMYSMCVWZMQVDOZNJVKCYMZDEVAGPGINZYRDTOPYNOQFBHSQTBVSEHLKEMYAVAIPGRJWGOKGEVDAHOMQHOIVDIJJUGWRXIKVEGOZXXATYKZGSAJJRDPDQOSFZYQRDPEWBCXMBTFRWZMCXSRVYYGPWVQYEVYEYGSCMIMMJEKNHMFITVRVESVRMHNJZOBVUXFUEZRZXEMZAJETKACLUOMNSILVGZUDGMMVHRQJCEVQCNUDIPLETUQEFNFRSPBNSZPZGPFBXLYDCVXSHBNJLSZDTNFRBHZWBNGOEAWPLSJICGIYLYVMQNECNRGVUDFHZQTZFECVXJRPDTLYJNYRBZKHZCLDKRKFPFOTSMEWGHLNBOPREBCKKZQHWOSCMCALHWRQUIUPFXQQDRIYPHEGQACEGVUPIHXWRNZFKAQUPHRKQOGCMYKOSPYOFFWTLWIXNPENYSUOZFGBFOFDXKAZWYPMPZBIYDUQTUDRMIKHPXKVGPLNHKFVDVBQRIPNMIBVFQWLFIBNYWWPXCHJUIZQRUQLVUJKSINVZVMHZVQRUFQHLAVKBKWRRFSTXGGXLLTQYWIKOOJKTDNEILIDHLSDDCUUIXKGGOIGOWGUJNKEYQTOXFSIYDCBZNPNOCHIDGQRQRHHWSMQWIHVEHFJCTPWJYLBCREAGVAWRWXAQTUNQRPIZJNYGBHZRBSSJHKFIVGJGECNKTHZNCJJZKPEDBJGSDDGHNZZWOMQSKROMELMUTXDMRTMMCUDITKDTCRIVASCJGZIKEAYURAJNRXJBDNSKJYAIKQIPNPCXZPTFXSAMOZSNZRIVVZUHTEKJHJDHXHWXBTOEWRRCDJFNXLLKWREMNGGJSEGVYVUNEPFXJLLXERBXWXWRXTVNZXDRZYQYBSRCZJEEIRXOPNLDQCBJEHRMRJCGFWRKJXBHCBWOVECBDWBPKZJGCUTUARBABISVVGBPGXGQKAZWYQJMYLGECUZBGEGMKEPHLBQGXZKJKVYDVIOTHCGQLHNBZUFPFTNEGQNOCMCSQICSKGGIGQDGEKRWZMIGNAAYPKXFYAFGKHGXXZATQBOAYKAJMKHPUOYOMBZVXUZZXFJAVISUFKKJQHVWQYSNQQPZJWSFYLBUOPPRIKIEOZQBOWVMDZTMMCVYJAINXTCEWJKAEPWCLPYWMEAKHKEWHKUIFQYTOBMDHRPFCXZOUWTQFDWQPXXYGGSQJISDJXQGSSPPRTXYKZBBZRTPJCIXZMVXAJLJESMDIMMNKQRCIVRBGWXRVJKIQBUYFFJRWEGUEJPGOTQGZOWNCTNKNABGGOTHHVJRWIAFCUHWLCZGUHZMUHHFOHCJVDFWCRSEMQUIXANXCVDJXQMIUCYGLVXRZJFAVILYXGYRWJCHNRMCSHACXXYZKHERFKXERVKRZZGGEKKVLKOBJSTPVXXDKNKEBQHWMHFLZYHISBQVTAWWWUCUUDVTUJNGIFKYUSSBRANAFKXCVCNDICEAGCBMYPEPAKXKIXHCSHPUSBDXPCYLMYCAEEMFPHHBTKZMJSVIFSAHBRQDAFHNIRBRCIPHERLGDBWAXUEAEJTPLRWSRTBQHMAFLOXEKCCNYULESFLEPHFGHXGEPRUVZSSEPROWGQZYGBVIBHXGRVYGLKGBPAXCYFNUFOZUSCNIUXAAJATAJQOZCLFGRSDOXWCOGZOFAZSPOCIDFJPYWONMBZQRAEXSSWIIZQJKSLDFQMNTLAGIWAWERODWJNFALCFOEPMAJQNTPDDWXJRMVULWBRHKFUYZEGYKWTSIBFHZMKMGFPVTGCCTTLGUNWDTZMDOPQQNUARSTVNCABCTJUCRCJVBBRKHJRSWUKSFFMVLTGDZTRAONWUALYRMQQPUTWEGVPWFUHNEYFGQHFAJCIRCDEPOGLEOSHYPDHACVHSBYFQFPSQVBABUWUVPTEWZKXIVTSEVICFAPNCRFURJCAERQPGQAEDWMPHWLIVLWWRTVVRTJYDNUVILRWFWAUQQTHWSPCMUBQOUCARJKFDYIPZVBFFBCLNTCHWKSGIQPVHJKEBHSEXEMFSSOGBILSQTXZTYIAGSMNUOXIUHJOEKONJTXSNALDYXFURJCFEAHFNFHADFLXFIMVPXIKHDFPTKXDCZMMEDFQGZFKOPAMXZHDIWENUGQJMGMHOXCCJWWRGTYPMRBVTCORIHYOMFTPMNJQCDCANUVKWLPDZJYDNTOPMPSNEZHHMJKLTGVUXNEJLZPOXLENESNWQESIJJQZAKISZMWKHSBLWFKOCLAJVFKSXVZBBDDHHEHMGXKPOVADQNZZIRBEYOSBILMKFRROVJTPUZEKIVMUTFMIRMCXXTOWRXQGGDHKCPQSTSPTUIAMCLCSLUAOXHNPOEGYCVMHVTEQPUITRIUKEVIDTAEWBTMCMIGWOVKNPNLIPBBKRFORNOGTYDJEGRALXQEOEZIYRPDVNITXMVGYAQLJFCLYFFFPSMZKBBYTEFPOEQTYUSPKFHAJLEUVNMQXXQSIRWPYWPOQIPEWDNEZCFIJOIJNJKPHWNFRUZZRGSRKCHHTIRXMWHIZCGXRVNXDNNYKXDVHMTIGHFLDWPFKNFTYCVHFSJODTREHZIOTNMWDWFQTPFMLVAXTEKFOJISLRMEKHXAHIYJVXQRJZZICNDCHDUOTYXMZEWNFOJVGAXQYXOAAIYEGCEBZCCTYZUMNLGBHPNQHMHEKUSFEBMOIZUHWEWGYCTBLNQILCXIQXDLIOAZUYBNXDRAFFLMXHKURBXMKNFTXSRWDIMCEOBGHBZNIFIUTODWRNERKSJKGZMKMSAUMSQPBWDPMWGTMXJLEGQVMFXFVUAWRUHQNSATDJHTNQJSYTTGRZWBIBEXAIEAOYFHWPWFCGLBQKKMCREJMESFXNQRUJOOLOJQTFOKFQQUHPDVYUEZLVTYLEZAHXELYNVKLVBYKDXIDYYXAMHSYRTPYZTHPRIQLXZIZEOGVKTEUPETKSAQASVKTZBKDSMCKWUYWUCUWOBZRBUYLMBRUUTCJTDZKUMARTCPYNCUNWEHLBJDKTLSFZTKJAKKNBRZWVUOSEXVMNYNEIMXSXDDRTYXATZYQTIJWIDUSFZQDWYNQVPTKYSUGTNUMHMOICHIKOSEJPYIIHNGRZLDBUZEOUCVTDHFVKFSWLUXRMFQWZWSXMOGUUMJICOWIXVALCIYXWLNQRQXVVJNPBZCWLTLSLSFXOPJZCXKTNNPAVWNZNTGELVEGFEPOKKUHRYEYCSZJNILBEDMBWWGYEHEOWNPCPQRNDYVIONZWWUNJBFAMKLVEUJMRJHIXEHICHWZUKHSHFTQABAFFIIKJLVPUCRPWPEMPVTNEKKDMSGPHBSCTABEVUNLQJMEQOOYZJQOFWGSSAOEONUSBXNIJODNYOKXSSZJLCWEOJQRWXVOVTYLHUVPCUJKEQBXELLMTKLTFHEXYIZOOMIAHFFZEWUFYTHJFZQPLFKEBMXYZMJDFFNSEUEJZVPYGOBEJTBODCBBPJBGSUOXWYARAZZFKQAPZKPAKUFGGFMTNSVXEMNJGQLMDYRWIGAYMXBKOBLIUYWXYQLPVZJDXXAYMRMFPFPDEVNTNQXHCEYKDMHCCHAONXJFPDSUNYVQPJIGMTTNVKCCEBZGVEXIBBKNJNEXVBHCBUUDUEHVYCTKDLEZIQZQUAYITFHNKZBVFROXIWHZVGFVEIIEYYSDENSQIHVDEUKTJOGWUPENUJRMPEXWFFVMYEFSVRLQKADWFGEWCSBRBYMKPJCOANOUGWIOEEOVBCAZISUWAGBIIMHIUPFPNDZHJITWIEFUXYGGROCNNRWCEXWXWFEEQRWGEERRUIMJJIVIKKACILJXXRERPWISZQDIRPMSZYUKWSIDAULUBHCFURFBRYBJDNQQVFOXYMWIWHLAHDDZHZEUYDDBOMFQNOVIKHOIYWDCHTDYAYOKXLSJMIZDROEKYBMBACXHPPDCAGFKSRINFCXMOPDDFZUYRPMZUWWNDVNECGFHIOEJWXPKCQQUEJKWPDWXXWVSPVOFDKKSZJJWZIYOXKHQUZFQFVFQUNNLDQKIGDBNPPWUDMTHUJISNKFFTSAAULJUQWELVSPUNTYMPCENZKCXVNDTFYXFFSFKGLOVENZKRGHGDHNTNZWAMUSPYJAVOUBGJWLTSLFAKBUVWCVFJGEQFVQPPCEEAKRYUTRLILHNXZUZDUDJYXKMBNJJRQSIDGODKZSFXTFLXSDPECDVGWVCXXHCRIGZWERXJQQYRLVMUTFZBKFNOFBWRBMKEECUIDU",
            1000
        );
        long endTime = System.nanoTime();
        System.out.println(String.format("took %d millis", (endTime - startTime) / 1000000));
        System.out.println(result);
    }

    public int characterReplacementRef(String s, int k) {
        if (s == null || s.length() == 0) return 0;
        int j = 0;
        int i = 0;
        int[] cnt = new int[26];
        int maxCnt = 0;
        int maxLen = 0;
        while (i < s.length()) {
            if (cnt[s.charAt(i) - 'A']++ >= maxCnt) maxCnt = cnt[s.charAt(i) - 'A'];
            while (i - j + 1 - maxCnt > k) {
                if (cnt[s.charAt(j++) - 'A']-- == maxCnt) {
                    maxCnt--;
                    for (int l = 0; l < 26; l++) {
                        if (cnt[l] > maxCnt)
                            maxCnt = cnt[l];
                    }
                }
            }
            maxLen = Math.max(maxLen, i - j + 1);
            i++;
        }
        return maxLen;
    }

    public int characterReplacement(String s, int k) {
        List<Character> uniqueChars = getUniqueChars(s);
        return forwardCount(s, k, uniqueChars);
    }
    
    List<Character> getUniqueChars(String s) {
        List<Character> list = new ArrayList<>();
        for(char c : s.toCharArray()) {
            if (!list.contains(c)) {
                list.add(c);
            }
        }
        return list;
    }
    
    int forwardCount(String s, int k, List<Character> chrs) {
        int maxCount = 0;
        if (k > s.length() - 2) return s.length();
        for (char chr : chrs) {
            int count = forwardCountForChr(s, k, chr);
            if (count > maxCount) {
                maxCount = count;
            }
            if (maxCount == s.length()) break;
        }
        return maxCount;
    }
    
    int forwardCountForChr(String s, int k, char chr) {
        int maxCount = 0;
        for (int i = 0; i < s.length(); i++) {
            StringBuilder sb = new StringBuilder(s.substring(i));
            int replacements = k, count = 0;
            for(int j = 0; j < sb.length(); j++) {
                if (sb.charAt(j) != chr) {
                    if (replacements > 0) {
                        replacements--;
                    } else {
                        break;
                    }
                }
                count++;
            }
            if (count > maxCount)
                maxCount = count;
        }
        
        return maxCount;
    }
}